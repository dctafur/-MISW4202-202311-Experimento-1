AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: MISW4202-202311 Experiment 1 (Viper)

# ---------------------------------------------------------------------------------------------
# @ Resources
# ---------------------------------------------------------------------------------------------
Resources:

  # Viper API
  ViperApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Viper-API
      StageName: api
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,POST,PUT,DELETE,HEAD,PATCH,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"

  # Purchase Order Table
  PurchaseOrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Viper-PurchaseOrder
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # Route Table
  RouteTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Viper-Route
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # Routes Job Execution Role
  RoutesJobExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Viper-RoutesJob-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  # Purchase Order Execution Role
  PurchaseOrderExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Viper-PurchaseOrder-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    DependsOn:
      - PurchaseOrderTable

  # Delivery Execution Role
  DeliveryExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Viper-Delivery-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    DependsOn:
      - RouteTable

  # Routes Job Execution Policy
  RoutesJobExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Viper-RoutesJob-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
      Roles:
        - !Ref RoutesJobExecutionRole
    DependsOn:
      - RoutesJobExecutionRole

  # Purchase Order Execution Policy
  PurchaseOrderExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Viper-PurchaseOrder-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt PurchaseOrderTable.Arn
              - !Join ['/', [!GetAtt PurchaseOrderTable.Arn, index, '*']]
      Roles:
        - !Ref PurchaseOrderExecutionRole
    DependsOn:
      - PurchaseOrderExecutionRole

  # Delivery Execution Policy
  DeliveryExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Viper-Delivery-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt RouteTable.Arn
              - !Join ['/', [!GetAtt RouteTable.Arn, index, '*']]
      Roles:
        - !Ref DeliveryExecutionRole
    DependsOn:
      - DeliveryExecutionRole

  # Routes Job Function
  RoutesJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Viper-RoutesJob-Function
      CodeUri: routes-job/
      Handler: src/index.handler
      MemorySize: 256
      Runtime: nodejs14.x
      Timeout: 25
      Role: !GetAtt RoutesJobExecutionRole.Arn
    DependsOn:
      - RoutesJobExecutionPolicy

  # Routes Job Rule
  RoutesJobRule:
    Type: AWS::Events::Rule
    Properties:
      Name: Viper-RouteJobs-Rule
      Description: 'Scheduled job for calculate the next day delivery routes'
      State: ENABLED
      ScheduleExpression: 'rate(5 minutes)'
      Targets:
        - Id: RoutesJobFunction
          Arn: !GetAtt RoutesJobFunction.Arn

  # Routes Job Permission
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RoutesJobFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RoutesJobRule.Arn

  # Purchase Order Function
  PurchaseOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Viper-PurchaseOrder-Function
      CodeUri: purchase-order/
      Handler: src/index.handler
      MemorySize: 256
      Runtime: nodejs14.x
      Timeout: 25
      Role: !GetAtt PurchaseOrderExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref PurchaseOrderTable
      Events:
        ListPurchaseOrders:
          Type: Api
          Properties:
            Path: /purchase-orders
            Method: get
            RestApiId: !Ref ViperApi
    DependsOn:
      - PurchaseOrderExecutionPolicy

  # Delivery Function
  DeliveryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Viper-Delivery-Function
      CodeUri: delivery/
      Handler: src/index.handler
      MemorySize: 256
      Runtime: nodejs14.x
      Timeout: 25
      Role: !GetAtt DeliveryExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref RouteTable
      Events:
        CalculateRoutes:
          Type: Api
          Properties:
            Path: /delivery
            Method: post
            RestApiId: !Ref ViperApi
    DependsOn:
      - DeliveryExecutionPolicy

  # Purchase Order Error Alarm
  PurchaseOrderErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Viper-PurchaseOrder-Error-Alarm
      AlarmDescription: !Sub 'Lambda *${PurchaseOrderFunction}* error alarm'
      Dimensions:
        - Name: FunctionName
          Value: !Ref PurchaseOrderFunction
        - Name: Resource
          Value: !Ref PurchaseOrderFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      TreatMissingData: notBreaching

  # Delivery Error Alarm
  DeliveryErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Viper-Delivery-Error-Alarm
      AlarmDescription: !Sub 'Lambda *${DeliveryFunction}* error alarm'
      Dimensions:
        - Name: FunctionName
          Value: !Ref DeliveryFunction
        - Name: Resource
          Value: !Ref DeliveryFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      TreatMissingData: notBreaching
